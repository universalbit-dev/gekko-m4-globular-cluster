/* Generated by Copilot
This implementation extends the functionality of the existing gekkoBroker.js to use the ccxt library for interacting with exchanges.
This version ensures that the CcxtBroker class is generic and can work with any exchange supported by the ccxt library by parameterizing the exchange configuration.
*/

/*
Key components:
    Imports: Includes various required modules and utilities.
    Constructor: Initializes the broker with configuration, sets API using ccxt, capabilities, market configuration, and initializes the portfolio if private.
    Methods:
        cantTrade and cantMonitor: Check if trading or monitoring is allowed.
        sync and syncPrivateData: Sync data with the exchange, including setting ticker and balances.
        setTicker: Fetches and sets the current ticker from the exchange using ccxt.
        isValidOrder: Validates an order based on amount and price.
        createOrder: Creates a new order and manages its state and events.
        createTrigger: Creates a new trigger for specific events.
        delay: Delays execution for a specified time.
This class integrates ccxt to manage communication with exchanges, enhancing the original broker functionality.
*/

require('dotenv').config();
const ccxt = require('ccxt');
const _ = require('underscore');
const async = require('async');
const {EventEmitter} = require("events");
const moment = require('moment');
const checker = require('./exchangeChecker');
const errors = require('./exchangeErrors');
const Portfolio = require('./portfolioManager');
const orders = require('./orders');
const Trigger = require('./trigger');
const exchangeUtils = require('./exchangeUtils');
const isValidOrder = exchangeUtils.isValidOrder;

class CcxtBroker extends EventEmitter {
  constructor(config) {
    this.config = config;

    if (config.private) {
      if (this.cantTrade()) {
        throw new Error(this.cantTrade());
      }
    } else {
      if (this.cantMonitor()) {
        throw new Error(this.cantMonitor());
      }
    }

    this.orders = {
      open: [],
      closed: [],
    };

    //exchange initialization
    const slug = config.watch.exchange;
    var id = config.watch.exchange;
    var apikey=process.env.key;
    var apisecret=process.env.secret;
    this.api = new ccxt[id] ({verbose: false,apiKey: apikey,secret: apisecret,});
    this.capabilities = this.api.has;

    this.marketConfig = {
      base: config.currency.toUpperCase(),
      quote: config.asset.toUpperCase(),
    };

    if (config.customInterval) {
      this.interval = config.customInterval;
      this.api.interval = config.customInterval;
      console.log(new Date(), '[GB] setting custom interval to', config.customInterval);
    } else {
      this.interval = 1500;
    }

    this.market = `${config.currency.toUpperCase()}/${config.asset.toUpperCase()}`;

    if (config.private) {
      this.portfolio = new Portfolio(config, this.api);
    }
    exchangeUtils.bindAll(this, _.functions(this));
    _.bindAll(this,_.functions(this));
  }

  cantTrade() {
    return checker.cantTrade(this.config);
  }

  cantMonitor() {
    return checker.cantMonitor(this.config);
  }

  sync(callback) {
    if(!this.private) {
      this.setTicker();
      return;
    }

    if(this.cantTrade()) {
      throw new errors.ExchangeError(this.cantTrade());
    }

    this.syncPrivateData();
  }

  async syncPrivateData(callback = () => {}) {
  try {
    await this.setTicker();
    await new Promise(resolve => setTimeout(resolve, this.interval));
    await this.portfolio.setFee();
    await new Promise(resolve => setTimeout(resolve, this.interval));
    await this.portfolio.setBalances();
    await new Promise(resolve => setTimeout(resolve, this.interval));
    callback();
  } catch (error) {
    callback(error);
  }
}

  async setTicker() {
  try {
    const ticker = await this.api.fetchTicker(this.market);
    this.ticker = ticker;
  } catch (err) {
    console.log(this.api.name, err.message);
      throw new errors.ExchangeError(err);
  }
  }

  isValidOrder(amount, price) {
    return isValidOrder({
      market: this.marketConfig,
      api: this.api,
      amount,
      price,
    });
  }

  createOrder(type, side, amount, parameters) {
    if (!this.config.private)
      throw new Error('Client not authenticated');

    if (side !== 'buy' && side !== 'sell')
      throw new Error('Unknown side ' + side);

    if (!orders[type])
      throw new Error('Unknown order type');

    const order = new orders[type]({
      api: this.api,
      marketConfig: this.marketConfig,
      capabilities: this.capabilities,
    });

    this.syncPrivateData().then(() => {
      order.setData({
        balances: this.portfolio.balances,
        ticker: this.ticker,
      });

      order.create(side, amount, parameters);
    });

    order.on('completed', (summary) => {
      _.without(this.orders.open, order);
      this.orders.closed.push(summary);
    });

    return order;
  }

  createTrigger({ type, onTrigger, props }) {
    return new Trigger({
      api: this.api,
      type,
      onTrigger,
      props,
    });
  }

  delay(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}

module.exports = CcxtBroker;

/*
The MIT License (MIT)
Copyright (c) 2014-2017 Mike van Rossum mike@mvr.me
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
